blueprint:
  name: Multi-Device W100 Smart Control
  description: v0.12.0 - Complete PID-controlled fan/heater with W100 remote integration - Supports Kogan Bladeless Fan and Philips Fan Heater (0.5°C precision temperature control)
  domain: automation
  input:
    device_type:
      name: Device Type
      description: Select the type of fan/heater device you're using
      selector:
        select:
          options:
            - label: "Kogan Smarterhome Bladeless Fan"
              value: "kogan_bladeless"
            - label: "Philips Fan Heater"
              value: "philips_heater"
      default: "kogan_bladeless"
    
    w100_device_name:
      name: W100 Device Name
      description: EXACT case-sensitive name of your W100 device as it appears in Zigbee2MQTT (e.g., "Tempcontrol00" with capital T, not "tempcontrol00")
      selector:
        text:
      default: "Tempcontrol00"
    
    heat_mode_boolean:
      name: Heat Mode Boolean
      description: Input boolean that controls heating mode
      selector:
        entity:
          domain: input_boolean
    
    fan_climate_entity:
      name: Fan/Heater Climate Entity
      description: The actual fan/heater climate entity
      selector:
        entity:
          domain: climate
    
    # Kogan Bladeless Fan specific entities
    fan_warm_level_entity:
      name: Fan Warm Level Entity (Kogan Only)
      description: The select entity that controls heating levels (only for Kogan Bladeless Fan)
      selector:
        entity:
          domain: select
      default: ""
    
    # Philips Fan Heater specific entities  
    fan_entity:
      name: Fan Entity (Philips Only)
      description: The fan entity for Philips heater (only for Philips Fan Heater)
      selector:
        entity:
          domain: fan
      default: ""
    
    temperature_number_entity:
      name: Temperature Number Entity (Philips Only)
      description: The number entity for temperature control (only for Philips Fan Heater)
      selector:
        entity:
          domain: number
      default: ""
    
    smart_thermostat_entity:
      name: Smart Thermostat Entity
      description: The smart_thermostat PID controller entity
      selector:
        entity:
          domain: climate
    
    humidity_sensor:
      name: Humidity Sensor
      description: Primary humidity sensor for W100 display
      selector:
        entity:
          domain: sensor
          device_class: humidity
    
    backup_humidity_sensor:
      name: Backup Humidity Sensor (Optional)
      description: Backup humidity sensor for initialization
      selector:
        entity:
          domain: sensor
          device_class: humidity
      default: ""
    
    heating_temperature:
      name: Heating Temperature (Kogan Only)
      description: Temperature to set when actively heating (only for Kogan Bladeless Fan)
      selector:
        number:
          min: 15
          max: 35
          unit_of_measurement: "°C"
      default: 30
    
    idle_temperature:
      name: Idle Temperature (Kogan Only)
      description: Temperature to set when maintaining idle (only for Kogan Bladeless Fan)
      selector:
        number:
          min: 15
          max: 35
          unit_of_measurement: "°C"
      default: 22
    
    heating_warm_level:
      name: Heating Warm Level (Kogan Only)
      description: Warm level when actively heating (only for Kogan Bladeless Fan)
      selector:
        select:
          options:
            - "1\""
            - "2"
            - "3"
            - "4"
      default: "4"
    
    idle_warm_level:
      name: Idle Warm Level (Kogan Only)
      description: Warm level when maintaining temperature (only for Kogan Bladeless Fan)
      selector:
        select:
          options:
            - "1\""
            - "2"
            - "3"
            - "4"
      default: "1\""
    
    idle_fan_speed:
      name: Idle Fan Speed (Kogan Only)
      description: Fan speed (1-9) when smart thermostat is idle or off (only for Kogan Bladeless Fan)
      selector:
        select:
          options:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
            - "8"
            - "9"
      default: "3"
    
    # Philips Fan Heater specific options
    philips_heating_preset:
      name: Heating Preset Mode (Philips Only)
      description: Preset mode to use for heating (only for Philips Fan Heater)
      selector:
        select:
          options:
            - "auto_plus"
            - "ventilation"
            - "low"
            - "medium"
            - "high"
      default: "high"
    
    philips_idle_preset:
      name: Idle Preset Mode (Philips Only)
      description: Preset mode to use when idle/off (only for Philips Fan Heater)
      selector:
        select:
          options:
            - "auto_plus"
            - "ventilation"
            - "low"
            - "medium"
            - "high"
      default: "low"
    
    swing_mode:
      name: Swing Mode
      description: Oscillation mode for the fan/heater
      selector:
        select:
          options:
            - "horizontal"
            - "vertical"
            - "both"
            - "off"
            - "on"
      default: "horizontal"
    
    fan_beep_switch:
      name: Fan Beep Switch (Kogan Only)
      description: Switch entity that controls the fan's beep sound (only for Kogan Bladeless Fan)
      selector:
        entity:
          domain: switch
      default: ""
    
    beep_mode:
      name: Beep Mode
      description: Control when the fan beeps
      selector:
        select:
          options:
            - "Enable Beep"
            - "Disable Beep"
            - "On-Mode Change"
      default: "On-Mode Change"

trigger_variables:
  w100_name: !input w100_device_name

variables:
  device_type: !input device_type
  fan_entity: !input fan_climate_entity
  warm_level_entity: !input fan_warm_level_entity
  philips_fan_entity: !input fan_entity
  philips_temp_entity: !input temperature_number_entity
  smart_entity: !input smart_thermostat_entity
  humidity_entity: !input humidity_sensor
  backup_humidity_entity: !input backup_humidity_sensor
  idle_fan_speed: !input idle_fan_speed
  idle_warm_level: !input idle_warm_level
  heating_temp: !input heating_temperature
  philips_heating_preset: !input philips_heating_preset
  philips_idle_preset: !input philips_idle_preset
  beep_switch: !input fan_beep_switch
  beep_mode: !input beep_mode

alias: "{{ w100_name }} Fan Control"
description: "PID-controlled fan with {{ w100_name }} remote integration"
mode: parallel
max: 8
max_exceeded: warning

trigger:
  # Office fan heat mode trigger
  - platform: state
    entity_id: !input heat_mode_boolean
    id: office_fan_heat_mode
  # Smart thermostat state trigger
  - platform: state
    entity_id: !input smart_thermostat_entity
    id: smart_thermostat_state
    to: "off"

  # Smart thermostat temperature change trigger (for beep)
  - platform: state
    entity_id: !input smart_thermostat_entity
    attribute: temperature
    id: smart_temp_change
  # Smart thermostat mode change trigger (for beep)
  - platform: state
    entity_id: !input smart_thermostat_entity
    id: smart_mode_change
    to:
      - "heat"
      - "off"
  # W100 button triggers
  - platform: mqtt
    topic: zigbee2mqtt/{{ w100_name }}/action
    payload: double_center
    id: w100_toggle
  - platform: mqtt
    topic: zigbee2mqtt/{{ w100_name }}/action
    payload: single_plus
    id: w100_plus
  - platform: mqtt
    topic: zigbee2mqtt/{{ w100_name }}/action
    payload: double_plus
    id: w100_plus
  - platform: mqtt
    topic: zigbee2mqtt/{{ w100_name }}/action
    payload: single_minus
    id: w100_minus
  - platform: mqtt
    topic: zigbee2mqtt/{{ w100_name }}/action
    payload: double_minus
    id: w100_minus
  # W100 sync triggers
  - platform: state
    entity_id: !input smart_thermostat_entity
    attribute: temperature
    id: w100_sync
  - platform: state
    entity_id: !input smart_thermostat_entity
    id: w100_sync
    from: 
      - "heat"
      - "off"
    to:
      - "heat" 
      - "off"
  - platform: state
    entity_id: !input fan_climate_entity
    attribute: fan_mode
    id: w100_sync
  # W100 startup trigger
  - platform: homeassistant
    event: start
    id: w100_init
  # W100 humidity sync trigger
  - platform: state
    entity_id: !input humidity_sensor
    id: w100_humidity
  # Fan temperature monitor for stuck heater workaround
  - platform: state
    entity_id: !input fan_climate_entity
    attribute: current_temperature
    id: fan_temp_monitor
  - platform: time_pattern
    minutes: '/1'
    seconds: '30'
    id: fan_temp_monitor

condition: []

action:
  - choose:
      # Fan/Heater Heat Mode On
      - conditions:
          - condition: trigger
            id: office_fan_heat_mode
          - condition: state
            entity_id: !input heat_mode_boolean
            state: "on"
        sequence:
          - choose:
              # Kogan Bladeless Fan
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: heat
                  - service: climate.set_temperature
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      temperature: !input heating_temperature
                  # Only set warm level if entity is provided
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ warm_level_entity != '' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ warm_level_entity if warm_level_entity != '' else 'sun.sun' }}"
                            data:
                              option: !input heating_warm_level
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode
              # Philips Fan Heater
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'philips_heater' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: heat
                  - service: climate.set_preset_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      preset_mode: !input philips_heating_preset
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ philips_temp_entity != '' }}"
                        sequence:
                          - service: number.set_value
                            target:
                              entity_id: "{{ philips_temp_entity if philips_temp_entity != '' else 'sun.sun' }}"
                            data:
                              value: 37
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode
          # Manage beep switch based on mode (Kogan only)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Enable Beep' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Disable Beep' }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
          # Force W100 display sync to show temperature
          - delay:
              milliseconds: 500
          - service: select.select_option
            target:
              entity_id: "select.{{ w100_name }}_sensor"
            data:
              option: external
          - service: number.set_value
            target:
              entity_id: "number.{{ w100_name }}_external_temperature"
            data:
              value: "{{ state_attr(smart_entity, 'temperature') | default(22) | round(1) }}"
      
      # Fan/Heater Heat Mode Off
      - conditions:
          - condition: trigger
            id: office_fan_heat_mode
          - condition: state
            entity_id: !input heat_mode_boolean
            state: "off"
        sequence:
          - choose:
              # Kogan Bladeless Fan
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: fan_only
                  - service: climate.set_fan_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      fan_mode: !input idle_fan_speed
                  - service: climate.set_temperature
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      temperature: !input idle_temperature
                  # Only set warm level if entity is provided
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ warm_level_entity != '' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ warm_level_entity if warm_level_entity != '' else 'sun.sun' }}"
                            data:
                              option: !input idle_warm_level
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode
              # Philips Fan Heater
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'philips_heater' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: fan_only
                  - service: climate.set_preset_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      preset_mode: !input philips_idle_preset
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode
          # Manage beep switch based on mode (Kogan only)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Enable Beep' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Disable Beep' }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"

      # Smart Thermostat Idle/Off - Switch to Fan Only
      - conditions:
          - condition: trigger
            id: smart_thermostat_state
          - condition: not
            conditions:
              - condition: state
                entity_id: !input smart_thermostat_entity
                state: heat
          - condition: state
            entity_id: !input smart_thermostat_entity
            state: "off"
        sequence:
          - choose:
              # Kogan Bladeless Fan
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: fan_only
                  - delay:
                      milliseconds: 1000
                  - service: climate.set_fan_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      fan_mode: !input idle_fan_speed
                  - delay:
                      milliseconds: 500
                  # Only set warm level if entity is provided
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ warm_level_entity != '' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ warm_level_entity if warm_level_entity != '' else 'sun.sun' }}"
                            data:
                              option: !input idle_warm_level
                  - service: climate.set_temperature
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      temperature: !input idle_temperature
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode
                  # Force another fan mode set after all other settings
                  - delay:
                      milliseconds: 500
                  - service: climate.set_fan_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      fan_mode: !input idle_fan_speed
              # Philips Fan Heater
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'philips_heater' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      hvac_mode: fan_only
                  - delay:
                      milliseconds: 1000
                  - service: climate.set_preset_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      preset_mode: !input philips_idle_preset
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      swing_mode: !input swing_mode

      # W100 Toggle Heat/Fan Mode
      - conditions:
          - condition: trigger
            id: w100_toggle
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: cool
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input smart_thermostat_entity
                    data:
                      hvac_mode: heat
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: "off"
                sequence:
                  # OFF → HEAT (correct behavior)
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input smart_thermostat_entity
                    data:
                      hvac_mode: heat
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
            default:
              # HEAT → OFF (or any other state → OFF)
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input smart_thermostat_entity
                data:
                  hvac_mode: "off"
              - service: select.select_option
                target:
                  entity_id: "select.{{ w100_name }}_sensor"
                data:
                  option: external
              - service: number.set_value
                target:
                  entity_id: "number.{{ w100_name }}_external_temperature"
                data:
                  value: >
                    {{ state_attr(fan_entity, 'fan_mode') | int(1) }}

      # W100 Increase Temp/Fan Speed
      - conditions:
          - condition: trigger
            id: w100_plus
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: heat
                sequence:
                  - variables:
                      current_temp: "{{ state_attr(smart_entity, 'temperature') | float }}"
                      max_temp: "{{ state_attr(smart_entity, 'max_temp') | float }}"
                      new_temp: "{{ [current_temp + 0.5, max_temp] | min }}"
                  - service: climate.set_temperature
                    target:
                      entity_id: !input smart_thermostat_entity
                    data:
                      temperature: "{{ new_temp }}"
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ new_temp }}"
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: cool
                sequence:
                  - variables:
                      current_fan: "{{ state_attr(fan_entity, 'fan_mode') | int(1) }}"
                      new_fan: "{{ [current_fan + 1, 9] | min }}"
                  - service: climate.set_fan_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      fan_mode: "{{ new_fan | string }}"
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ new_fan }}"
            default:
              # Handle OFF mode - device-specific control
              - choose:
                  # Kogan Bladeless Fan - numeric fan speed
                  - conditions:
                      - condition: template
                        value_template: "{{ device_type == 'kogan_bladeless' }}"
                    sequence:
                      - variables:
                          current_fan: "{{ state_attr(fan_entity, 'fan_mode') | int(1) }}"
                          new_fan: "{{ [current_fan + 1, 9] | min }}"
                      - service: climate.set_fan_mode
                        target:
                          entity_id: !input fan_climate_entity
                        data:
                          fan_mode: "{{ new_fan | string }}"
                      - service: select.select_option
                        target:
                          entity_id: "select.{{ w100_name }}_sensor"
                        data:
                          option: external
                      - service: number.set_value
                        target:
                          entity_id: "number.{{ w100_name }}_external_temperature"
                        data:
                          value: "{{ new_fan }}"
                  # Philips Fan Heater - preset cycling
                  - conditions:
                      - condition: template
                        value_template: "{{ device_type == 'philips_heater' }}"
                    sequence:
                      - variables:
                          preset_order: ["low", "medium", "high", "auto_plus"]
                          current_preset: "{{ state_attr(philips_fan_entity, 'preset_mode') | default('low') }}"
                          current_index: "{{ preset_order.index(current_preset) if current_preset in preset_order else 0 }}"
                          new_index: "{{ [current_index + 1, 3] | min }}"
                          new_preset: "{{ preset_order[new_index] }}"
                          preset_to_number: {"low": 2, "medium": 5, "high": 7, "auto_plus": 9}
                          display_value: "{{ preset_to_number[new_preset] }}"
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ philips_fan_entity != ''  }}"
                            sequence:
                              - service: fan.set_preset_mode
                                target:
                                  entity_id: "{{ philips_fan_entity }}"
                                data:
                                  preset_mode: "{{ new_preset }}"
                      - service: select.select_option
                        target:
                          entity_id: "select.{{ w100_name }}_sensor"
                        data:
                          option: external
                      - service: number.set_value
                        target:
                          entity_id: "number.{{ w100_name }}_external_temperature"
                        data:
                          value: "{{ display_value }}"

      # W100 Decrease Temp/Fan Speed
      - conditions:
          - condition: trigger
            id: w100_minus
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: heat
                sequence:
                  - variables:
                      current_temp: "{{ state_attr(smart_entity, 'temperature') | float }}"
                      min_temp: "{{ state_attr(smart_entity, 'min_temp') | float }}"
                      new_temp: "{{ [current_temp - 0.5, min_temp] | max }}"
                  - service: climate.set_temperature
                    target:
                      entity_id: !input smart_thermostat_entity
                    data:
                      temperature: "{{ new_temp }}"
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ new_temp }}"
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: cool
                sequence:
                  - variables:
                      current_fan: "{{ state_attr(fan_entity, 'fan_mode') | int(1) }}"
                      new_fan: "{{ [current_fan - 1, 1] | max }}"
                  - service: climate.set_fan_mode
                    target:
                      entity_id: !input fan_climate_entity
                    data:
                      fan_mode: "{{ new_fan | string }}"
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ new_fan }}"
            default:
              # Handle OFF mode - device-specific control
              - choose:
                  # Kogan Bladeless Fan - numeric fan speed
                  - conditions:
                      - condition: template
                        value_template: "{{ device_type == 'kogan_bladeless' }}"
                    sequence:
                      - variables:
                          current_fan: "{{ state_attr(fan_entity, 'fan_mode') | int(1) }}"
                          new_fan: "{{ [current_fan - 1, 1] | max }}"
                      - service: climate.set_fan_mode
                        target:
                          entity_id: !input fan_climate_entity
                        data:
                          fan_mode: "{{ new_fan | string }}"
                      - service: select.select_option
                        target:
                          entity_id: "select.{{ w100_name }}_sensor"
                        data:
                          option: external
                      - service: number.set_value
                        target:
                          entity_id: "number.{{ w100_name }}_external_temperature"
                        data:
                          value: "{{ new_fan }}"
                  # Philips Fan Heater - preset cycling
                  - conditions:
                      - condition: template
                        value_template: "{{ device_type == 'philips_heater' }}"
                    sequence:
                      - variables:
                          preset_order: ["low", "medium", "high", "auto_plus"]
                          current_preset: "{{ state_attr(philips_fan_entity, 'preset_mode') | default('low') }}"
                          current_index: "{{ preset_order.index(current_preset) if current_preset in preset_order else 0 }}"
                          new_index: "{{ [current_index - 1, 0] | max }}"
                          new_preset: "{{ preset_order[new_index] }}"
                          preset_to_number: {"low": 2, "medium": 5, "high": 7, "auto_plus": 9}
                          display_value: "{{ preset_to_number[new_preset] }}"
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ philips_fan_entity != ''  }}"
                            sequence:
                              - service: fan.set_preset_mode
                                target:
                                  entity_id: "{{ philips_fan_entity }}"
                                data:
                                  preset_mode: "{{ new_preset }}"
                      - service: select.select_option
                        target:
                          entity_id: "select.{{ w100_name }}_sensor"
                        data:
                          option: external
                      - service: number.set_value
                        target:
                          entity_id: "number.{{ w100_name }}_external_temperature"
                        data:
                          value: "{{ display_value }}"

      # W100 Sync Display Values
      - conditions:
          - condition: trigger
            id: w100_sync
        sequence:
          # Add debouncing to prevent rapid successive updates
          - delay:
              milliseconds: 100
          - variables:
              current_sensor_mode: "{{ states('select.' ~ w100_name ~ '_sensor') }}"
              current_ext_temp: "{{ states('number.' ~ w100_name ~ '_external_temperature') | float(0) }}"
              smart_mode: "{{ states(smart_entity) }}"
              target_temp: "{{ state_attr(smart_entity, 'temperature') | default(22) | round(1) }}"
              # Device-specific fan speed calculation
              fan_speed: >
                {% if device_type == 'kogan_bladeless' %}
                  {{ state_attr(fan_entity, 'fan_mode') | int(1) }}
                {% elif device_type == 'philips_heater'  %}
                  {% set preset = state_attr(philips_fan_entity, 'preset_mode') | default('low') %}
                  {% set preset_to_number = {"low": 2, "medium": 5, "high": 7, "auto_plus": 9, "ventilation": 1} %}
                  {{ preset_to_number[preset] if preset in preset_to_number else 2 }}
                {% else %}
                  1
                {% endif %}
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: heat
                  - condition: or
                    conditions:
                      - condition: template
                        value_template: "{{ current_sensor_mode != 'external' }}"
                      - condition: template
                        value_template: "{{ current_ext_temp != target_temp }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ target_temp }}"
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: cool
                  - condition: or
                    conditions:
                      - condition: template
                        value_template: "{{ current_sensor_mode != 'external' }}"
                      - condition: template
                        value_template: "{{ current_ext_temp != fan_speed }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ fan_speed }}"
            default:
              # Only show fan speed when NOT in heat mode
              - condition: and
                conditions:
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: !input smart_thermostat_entity
                        state: heat
                  - condition: template
                    value_template: "{{ current_sensor_mode != 'external' or current_ext_temp != fan_speed }}"
              - service: select.select_option
                target:
                  entity_id: "select.{{ w100_name }}_sensor"
                data:
                  option: external
              - service: number.set_value
                target:
                  entity_id: "number.{{ w100_name }}_external_temperature"
                data:
                  value: "{{ fan_speed }}"

      # W100 Initialize Display on Startup
      - conditions:
          - condition: trigger
            id: w100_init
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input smart_thermostat_entity
                    state: heat
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "select.{{ w100_name }}_sensor"
                    data:
                      option: external
                  - service: number.set_value
                    target:
                      entity_id: "number.{{ w100_name }}_external_temperature"
                    data:
                      value: "{{ state_attr(smart_entity, 'temperature') | default(22) | round(1) }}"
            default:
              - service: select.select_option
                target:
                  entity_id: "select.{{ w100_name }}_sensor"
                data:
                  option: external
              - service: number.set_value
                target:
                  entity_id: "number.{{ w100_name }}_external_temperature"
                data:
                  value: >
                    {% if device_type == 'kogan_bladeless' %}
                      {{ state_attr(fan_entity, 'fan_mode') | int(1) }}
                    {% elif device_type == 'philips_heater'  %}
                      {% set preset = state_attr(philips_fan_entity, 'preset_mode') | default('low') %}
                      {% set preset_to_number = {"low": 2, "medium": 5, "high": 7, "auto_plus": 9, "ventilation": 1} %}
                      {{ preset_to_number[preset] if preset in preset_to_number else 2 }}
                    {% else %}
                      1
                    {% endif %}
          - service: number.set_value
            target:
              entity_id: "number.{{ w100_name }}_external_humidity"
            data:
              value: >
                {% if backup_humidity_entity %}
                  {{ states(backup_humidity_entity) | round(0) }}
                {% else %}
                  50
                {% endif %}
          # Set beep mode on startup (Kogan only)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Enable Beep' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'Disable Beep' }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
              - conditions:
                  - condition: template
                    value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'On-Mode Change' }}"
                sequence:
                  # On-Mode Change - ensure beep is off initially
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"

      # W100 Sync Humidity Display
      - conditions:
          - condition: trigger
            id: w100_humidity
        sequence:
          - variables:
              current_humidity: "{{ states(humidity_entity) | round(0) }}"
              w100_humidity: "{{ states('number.' ~ w100_name ~ '_external_humidity') | round(0) }}"
          - condition: template
            value_template: "{{ current_humidity != w100_humidity }}"
          - service: number.set_value
            target:
              entity_id: "number.{{ w100_name }}_external_humidity"
            data:
              value: "{{ current_humidity }}"
      
      # Fan Temperature Monitor - Workaround for stuck heater
      - conditions:
          - condition: trigger
            id: fan_temp_monitor
          - condition: state
            entity_id: !input smart_thermostat_entity
            state: heat
          - condition: template
            value_template: >
              {% set fan_temp = state_attr(fan_entity, 'current_temperature') | float(0) %}
              {% set room_temp = state_attr(smart_entity, 'current_temperature') | float(0) %}
              {% set fan_setpoint = state_attr(fan_entity, 'temperature') | float(0) %}
              {{ fan_temp >= 29.5 and fan_temp >= (fan_setpoint - 0.5) and room_temp < 29 and (fan_temp - room_temp) > 2 }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input smart_thermostat_entity
            data:
              hvac_mode: "off"
          - delay:
              seconds: 5
          - service: climate.set_hvac_mode
            target:
              entity_id: !input fan_climate_entity
            data:
              hvac_mode: fan_only
          - service: climate.set_fan_mode
            target:
              entity_id: !input fan_climate_entity
            data:
              fan_mode: "6"
          - delay:
              minutes: 2
          - service: climate.set_hvac_mode
            target:
              entity_id: !input smart_thermostat_entity
            data:
              hvac_mode: heat
      
      # Smart Thermostat Temperature Change - Beep (Kogan Only)
      - conditions:
          - condition: trigger
            id: smart_temp_change
          - condition: template
            value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'On-Mode Change' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
          - delay:
              milliseconds: 200
          - service: switch.turn_on
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
          - delay:
              milliseconds: 500
          - service: switch.turn_off
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
      
      # Smart Thermostat Mode Change - Beep (Kogan Only)
      - conditions:
          - condition: trigger
            id: smart_mode_change
          - condition: template
            value_template: "{{ device_type == 'kogan_bladeless' and beep_switch != '' and beep_mode == 'On-Mode Change' }}"
          # Don't beep if this was triggered by the workaround
          - condition: template
            value_template: >
              {% set last_changed = states.climate[smart_entity.split('.')[1]].last_changed %}
              {{ (now() - last_changed).total_seconds() > 10 }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
          - delay:
              milliseconds: 200
          - service: switch.turn_on
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"
          - delay:
              milliseconds: 500
          - service: switch.turn_off
            target:
              entity_id: "{{ beep_switch if beep_switch != '' else 'sun.sun' }}"